 private void livFileSystem_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            TextFormatFlags flags = GetTextAlignment(e.ColumnIndex);
            Color foreGround = _unSelectedForeground;
            Color backGround = _unSelectedBackground;
            Font font = e.SubItem.Font;

            if (e.Item.Selected)
            {
                using (var brush = new SolidBrush(_selectedBackground))
                {
                    e.Graphics.FillRectangle(brush, e.Bounds);
                }

                foreGround = _selectedForeground;
                font = _selectedFont;
            }
            ////else 
            ////if (e.Item.Focused)
            ////{ 
            ////    using (var brush = new SolidBrush(_focusedBackground))
            ////    {
            ////        e.Graphics.FillRectangle(brush, e.Bounds);
            ////    }

            ////    foreGround = Color.Green; // _focusedForeground;
            //////    e.Graphics.drawt
            ////}
            else
                e.DrawBackground();

            TextRenderer.DrawText(e.Graphics, e.SubItem.Text, font, e.Bounds, foreGround, backGround, flags);
        }
    }


      private void livFileSystem_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)
        {
            e.DrawDefault = true;
        }

                //private void livFileSystem_MouseMove(object sender, MouseEventArgs e)
        //{
        //    ListViewItem item = livFileSystem.GetItemAt(e.X, e.Y);
        //    if (item != null && item.Tag == null)
        //    {
        //        livFileSystem.Invalidate(item.Bounds);
        //        item.Tag = "tagged";
        //    }
        //}

        //private void livFileSystem_ColumnWidthChanged(object sender, ColumnWidthChangedEventArgs e)
        //{
        //    livFileSystem.Invalidate();
        //}

                private void livFileSystem_KeyDown(object sender, KeyEventArgs e)
        {
            ListViewItem item = livFileSystem.FocusedItem;

            switch (e.KeyCode)
            {
                case Keys.Insert:
                    item.Selected = !item.Selected;
                    int index = item.Index + 1;
                    if (index < livFileSystem.Items.Count)
                    {
                        livFileSystem.Items[index].Focused = true;
                        livFileSystem.Items[index].EnsureVisible();
                    }
                    break;
                default:
                    break;

            }
        }

         private void livFileSystem_MouseUp(object sender, MouseEventArgs e)
        {
            ListViewItem clickedItem = livFileSystem.GetItemAt(5, e.Y);
            if (clickedItem != null)
            {
                clickedItem.Selected = true;
                clickedItem.Focused = true;
            }
        }

                    if ((e.State & ListViewItemStates.Selected) != 0)
            {
                // Draw the background and focus rectangle for a selected item.
                e.Graphics.FillRectangle(Brushes.Maroon, e.Bounds);
                e.DrawFocusRectangle();
            }
            else
            {
                // Draw the background for an unselected item.
                using (LinearGradientBrush brush =
                    new LinearGradientBrush(e.Bounds, Color.Orange,
                    Color.Maroon, LinearGradientMode.Horizontal))
                {
                    e.Graphics.FillRectangle(brush, e.Bounds);
                }
            }

            // Draw the item text for views other than the Details view.
            if (livFileSystem.View != View.Details)
            {
                e.DrawText();
            }

                        TextFormatFlags flags = TextFormatFlags.Left;

            using (StringFormat sf = new StringFormat())
            {
                // Store the column text alignment, letting it default
                // to Left if it has not been set to Center or Right.
                switch (e.Header.TextAlign)
                {
                    case HorizontalAlignment.Center:
                        sf.Alignment = StringAlignment.Center;
                        flags = TextFormatFlags.HorizontalCenter;
                        break;
                    case HorizontalAlignment.Right:
                        sf.Alignment = StringAlignment.Far;
                        flags = TextFormatFlags.Right;
                        break;
                }

                // Draw the text and background for a subitem with a 
                // negative value. 
                double subItemValue;
                if (e.ColumnIndex > 0 && double.TryParse(
                    e.SubItem.Text, NumberStyles.Currency,
                    NumberFormatInfo.CurrentInfo, out subItemValue) && subItemValue < 0)
                {
                    // Unless the item is selected, draw the standard 
                    // background to make it stand out from the gradient.
                    if ((e.ItemState & ListViewItemStates.Selected) == 0)
                    {
                        e.DrawBackground();
                    }

                    // Draw the subitem text in red to highlight it. 
                    e.Graphics.DrawString(e.SubItem.Text, livFileSystem.Font, Brushes.Red, e.Bounds, sf);

                    return;
                }

                // Draw normal text for a subitem with a nonnegative 
                // or nonnumerical value.
                e.DrawText(flags);
            }
