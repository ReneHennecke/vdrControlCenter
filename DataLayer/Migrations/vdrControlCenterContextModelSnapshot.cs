// <auto-generated />
using System;
using DataLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(vdrControlCenterContext))]
    partial class vdrControlCenterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Models.Channels", b =>
                {
                    b.Property<long>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apid")
                        .HasColumnName("APID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Caid")
                        .HasColumnName("CAID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnName("ChannelID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ChannelName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("Favourite")
                        .HasColumnType("bit");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Nid")
                        .HasColumnName("NID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Params")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Rid")
                        .HasColumnName("RID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sid")
                        .HasColumnName("SID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SignalSource")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("SymbolRate")
                        .HasColumnType("int");

                    b.Property<string>("Tid")
                        .HasColumnName("TID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Tpid")
                        .HasColumnName("TPID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Vpid")
                        .HasColumnName("VPID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RecId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("DataLayer.Models.Epg", b =>
                {
                    b.Property<long>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChannelRecId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnName("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("DurationComputed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("([Duration] / (60))");

                    b.Property<DateTime?>("EndTimeComputed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasComputedColumnSql("(dateadd(second, isnull([Duration], (0)), [StartTime])");

                    b.Property<int?>("EventId")
                        .HasColumnName("EventID")
                        .HasColumnType("int");

                    b.Property<bool?>("Favourite")
                        .HasColumnName("Favourite")
                        .HasColumnType("bit");

                    b.Property<string>("GenreCodes")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Modtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("ParentalRating")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Stream")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TableId")
                        .HasColumnName("TableID")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Vps")
                        .HasColumnName("VPS")
                        .HasColumnType("datetime");

                    b.HasKey("RecId");

                    b.HasIndex("ChannelRecId", "EventId")
                        .HasName("NCI_EventID");

                    b.HasIndex("ChannelRecId", "StartTime")
                        .HasName("NCI_ChannelRecId_StartTime");

                    b.ToTable("EPG");
                });

            modelBuilder.Entity("DataLayer.Models.FakeEpg", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ChannelRecId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelsRecId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool?>("Favourite")
                        .HasColumnType("bit");

                    b.Property<string>("GenreCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modtime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentalRating")
                        .HasColumnType("int");

                    b.Property<long>("RecId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecordingsRecId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Stream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SymbolIndex")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimersRecId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VPID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Vps")
                        .HasColumnName("VPS")
                        .HasColumnType("datetime2");

                    b.ToTable("FakeEpgs");
                });

            modelBuilder.Entity("DataLayer.Models.FindEntry", b =>
                {
                    b.Property<string>("ChannelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ChannelRecId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("GenreCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentalRating")
                        .HasColumnType("int");

                    b.Property<long>("RecId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SymbolIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Vps")
                        .HasColumnName("VPS")
                        .HasColumnType("datetime2");

                    b.ToTable("FoundEntries");
                });

            modelBuilder.Entity("DataLayer.Models.Recordings", b =>
                {
                    b.Property<long>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RecordingPath")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("RecordingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RecId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("DataLayer.Models.StationTypes", b =>
                {
                    b.Property<int>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StationType")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("RecId");

                    b.ToTable("StationTypes");
                });

            modelBuilder.Entity("DataLayer.Models.Stations", b =>
                {
                    b.Property<long>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnableWol")
                        .HasColumnName("EnableWOL")
                        .HasColumnType("bit");

                    b.Property<string>("HostAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("MacAddress")
                        .HasColumnType("nvarchar(17)")
                        .HasMaxLength(17);

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PathToRecordings")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SambaPassword")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("SambaUserName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Sshpassword")
                        .HasColumnName("SSHPassword")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("Sshport")
                        .HasColumnName("SSHPort")
                        .HasColumnType("int");

                    b.Property<string>("SshuserName")
                        .HasColumnName("SSHUserName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("StationType")
                        .HasColumnType("int");

                    b.Property<int?>("Svdrpport")
                        .HasColumnName("SVDRPPort")
                        .HasColumnType("int");

                    b.Property<int?>("VdrControlServicePort")
                        .HasColumnType("int");

                    b.Property<string>("VdradminPassword")
                        .HasColumnName("VDRAdminPassword")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("VdradminPort")
                        .HasColumnName("VDRAdminPort")
                        .HasColumnType("int");

                    b.Property<string>("VdradminUserName")
                        .HasColumnName("VDRAdminUserName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("RecId");

                    b.HasIndex("HostAddress")
                        .IsUnique()
                        .HasName("IX_Stations");

                    b.HasIndex("StationType")
                        .HasName("NCI_StationType");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("DataLayer.Models.StatusInfo", b =>
                {
                    b.Property<long>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FreeDiskSpace")
                        .HasColumnType("int");

                    b.Property<long>("SystemSettingsRecId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalDiskSpace")
                        .HasColumnType("int");

                    b.Property<decimal?>("UsedPercent")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("RecId");

                    b.HasIndex("SystemSettingsRecId");

                    b.ToTable("StatusInfo");
                });

            modelBuilder.Entity("DataLayer.Models.SystemSettings", b =>
                {
                    b.Property<long>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("ChannelListType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("EnableLogging")
                        .HasColumnType("bit");

                    b.Property<bool?>("FavouritesOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateChannels")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdateEpg")
                        .HasColumnName("LastUpdateEPG")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdateRecordings")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdateStatus")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdateTimers")
                        .HasColumnType("datetime");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(15);

                    b.Property<bool?>("SaveBufferToFile")
                        .HasColumnType("bit");

                    b.HasKey("RecId");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("DataLayer.Models.Timers", b =>
                {
                    b.Property<long>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<long?>("ChannelRecId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modtime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RecId");

                    b.HasIndex("ChannelRecId")
                        .HasName("NCI_ChannelRecId");

                    b.HasIndex("Title", "StartTime", "EndTime")
                        .HasName("NCI_Title_StartTime_EndTime");

                    b.ToTable("Timers");
                });

            modelBuilder.Entity("DataLayer.Models.Epg", b =>
                {
                    b.HasOne("DataLayer.Models.Channels", "ChannelRec")
                        .WithMany("Epg")
                        .HasForeignKey("ChannelRecId")
                        .HasConstraintName("FK_EPG_Channels")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Stations", b =>
                {
                    b.HasOne("DataLayer.Models.StationTypes", "StationTypeNavigation")
                        .WithMany("Stations")
                        .HasForeignKey("StationType")
                        .HasConstraintName("FK_Stations_StationTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.StatusInfo", b =>
                {
                    b.HasOne("DataLayer.Models.SystemSettings", "SystemSettingsRec")
                        .WithMany("StatusInfo")
                        .HasForeignKey("SystemSettingsRecId")
                        .HasConstraintName("FK_StatusInfo_SystemSettingsRecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.Timers", b =>
                {
                    b.HasOne("DataLayer.Models.Channels", "ChannelRec")
                        .WithMany("Timers")
                        .HasForeignKey("ChannelRecId")
                        .HasConstraintName("FK_Timers_Channels")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
