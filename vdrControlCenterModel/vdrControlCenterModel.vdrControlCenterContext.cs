//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 26.09.2020 08:19:49
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using vdrControlCenterModel;

namespace Datalayer
{

    public partial class vdrControlCenterContext : DbContext
    {

        public vdrControlCenterContext() :
            base()
        {
            OnCreated();
        }

        public vdrControlCenterContext(DbContextOptions<vdrControlCenterContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=RH0;Initial Catalog=vdrControlCenter_Test;Integrated Security=True;Persist Security Info=True");
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Channel> Channels
        {
            get;
            set;
        }

        public virtual DbSet<EPG> EPGs
        {
            get;
            set;
        }

        public virtual DbSet<Recording> Recordings
        {
            get;
            set;
        }

        public virtual DbSet<Station> Stations
        {
            get;
            set;
        }

        public virtual DbSet<StationType> StationTypes
        {
            get;
            set;
        }

        public virtual DbSet<StatusInfo> StatusInfos
        {
            get;
            set;
        }

        public virtual DbSet<SystemSetting> SystemSettings
        {
            get;
            set;
        }

        public virtual DbSet<Timer> Timers
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.ChannelMapping(modelBuilder);
            this.CustomizeChannelMapping(modelBuilder);

            this.EPGMapping(modelBuilder);
            this.CustomizeEPGMapping(modelBuilder);

            this.RecordingMapping(modelBuilder);
            this.CustomizeRecordingMapping(modelBuilder);

            this.StationMapping(modelBuilder);
            this.CustomizeStationMapping(modelBuilder);

            this.StationTypeMapping(modelBuilder);
            this.CustomizeStationTypeMapping(modelBuilder);

            this.StatusInfoMapping(modelBuilder);
            this.CustomizeStatusInfoMapping(modelBuilder);

            this.SystemSettingMapping(modelBuilder);
            this.CustomizeSystemSettingMapping(modelBuilder);

            this.TimerMapping(modelBuilder);
            this.CustomizeTimerMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Channel Mapping

        private void ChannelMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Channel>().ToTable(@"Channels", @"dbo");
            modelBuilder.Entity<Channel>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Channel>().Property(x => x.Modtime).HasColumnName(@"Modtime").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"sysdatetime()");
            modelBuilder.Entity<Channel>().Property(x => x.Number).HasColumnName(@"Number").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Channel>().Property(x => x.ChannelID).HasColumnName(@"ChannelID").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.ChannelName).HasColumnName(@"ChannelName").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Channel>().Property(x => x.ProviderName).HasColumnName(@"ProviderName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.Frequency).HasColumnName(@"Frequency").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Channel>().Property(x => x.Parameter).HasColumnName(@"Parameter").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.SignalSource).HasColumnName(@"SignalSource").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Channel>().Property(x => x.SymbolRate).HasColumnName(@"SymbolRate").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Channel>().Property(x => x.VPID).HasColumnName(@"VPID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.APID).HasColumnName(@"APID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.TPID).HasColumnName(@"TPID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.CAID).HasColumnName(@"CAID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.SID).HasColumnName(@"SID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.NID).HasColumnName(@"NID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.TID).HasColumnName(@"TID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.RID).HasColumnName(@"RID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Channel>().Property(x => x.Params).HasColumnName(@"Params").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<Channel>().Property(x => x.Favourite).HasColumnName(@"Favourite").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Channel>().HasKey(@"RecId");
        }

        partial void CustomizeChannelMapping(ModelBuilder modelBuilder);

        #endregion

        #region EPG Mapping

        private void EPGMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EPG>().ToTable(@"EPG", @"dbo");
            modelBuilder.Entity<EPG>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EPG>().Property(x => x.Modtime).HasColumnName(@"Modtime").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"sysdatetime()");
            modelBuilder.Entity<EPG>().Property(x => x.ChannelRecId).HasColumnName(@"ChannelRecId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<EPG>().Property(x => x.EventID).HasColumnName(@"EventID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<EPG>().Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EPG>().Property(x => x.Duration).HasColumnName(@"Duration").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<EPG>().Property(x => x.TableID).HasColumnName(@"TableID").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EPG>().Property(x => x.Version).HasColumnName(@"Version").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EPG>().Property(x => x.Title).HasColumnName(@"Title").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EPG>().Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EPG>().Property(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<EPG>().Property(x => x.GenreCodes).HasColumnName(@"GenreCodes").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<EPG>().Property(x => x.ParentalRating).HasColumnName(@"ParentalRating").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<EPG>().Property(x => x.Stream).HasColumnName(@"Stream").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EPG>().Property(x => x.VPS).HasColumnName(@"VPS").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EPG>().HasKey(@"RecId");
        }

        partial void CustomizeEPGMapping(ModelBuilder modelBuilder);

        #endregion

        #region Recording Mapping

        private void RecordingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Recording>().ToTable(@"Recordings", @"dbo");
            modelBuilder.Entity<Recording>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Recording>().Property(x => x.Modtime).HasColumnName(@"Modtime").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"sysdatetime()");
            modelBuilder.Entity<Recording>().Property(x => x.Number).HasColumnName(@"Number").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Recording>().Property(x => x.RecordingTime).HasColumnName(@"RecordingTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Recording>().Property(x => x.Duration).HasColumnName(@"Duration").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Recording>().Property(x => x.Title).HasColumnName(@"Title").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Recording>().Property(x => x.RecordingPath).HasColumnName(@"RecordingPath").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Recording>().HasKey(@"RecId");
        }

        partial void CustomizeRecordingMapping(ModelBuilder modelBuilder);

        #endregion

        #region Station Mapping

        private void StationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Station>().ToTable(@"Stations", @"dbo");
            modelBuilder.Entity<Station>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Station>().Property(x => x.MachineName).HasColumnName(@"MachineName").HasColumnType(@"nvarchar(15)").IsRequired().ValueGeneratedNever().HasMaxLength(15);
            modelBuilder.Entity<Station>().Property(x => x.HostAddress).HasColumnName(@"HostAddress").HasColumnType(@"nvarchar(15)").IsRequired().ValueGeneratedNever().HasMaxLength(15);
            modelBuilder.Entity<Station>().Property(x => x.StationType).HasColumnName(@"StationType").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Station>().Property(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Station>().Property(x => x.SSHPort).HasColumnName(@"SSHPort").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Station>().Property(x => x.SSHUserName).HasColumnName(@"SSHUserName").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Station>().Property(x => x.SSHPassword).HasColumnName(@"SSHPassword").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Station>().Property(x => x.SVDRPPort).HasColumnName(@"SVDRPPort").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Station>().Property(x => x.SambaUserName).HasColumnName(@"SambaUserName").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Station>().Property(x => x.SambaPassword).HasColumnName(@"SambaPassword").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Station>().Property(x => x.PathToRecordings).HasColumnName(@"PathToRecordings").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Station>().Property(x => x.VdrControlServicePort).HasColumnName(@"VdrControlServicePort").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Station>().Property(x => x.MacAddress).HasColumnName(@"MacAddress").HasColumnType(@"nvarchar(17)").ValueGeneratedNever().HasMaxLength(17);
            modelBuilder.Entity<Station>().Property(x => x.EnableWOL).HasColumnName(@"EnableWOL").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Station>().Property(x => x.VDRAdminPort).HasColumnName(@"VDRAdminPort").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Station>().Property(x => x.VDRAdminUserName).HasColumnName(@"VDRAdminUserName").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Station>().Property(x => x.VDRAdminPassword).HasColumnName(@"VDRAdminPassword").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Station>().HasKey(@"RecId");
            modelBuilder.Entity<Station>().HasIndex(@"HostAddress").IsUnique(true);
        }

        partial void CustomizeStationMapping(ModelBuilder modelBuilder);

        #endregion

        #region StationType Mapping

        private void StationTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StationType>().ToTable(@"StationTypes", @"dbo");
            modelBuilder.Entity<StationType>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<StationType>().Property(x => x.StationType1).HasColumnName(@"StationType").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<StationType>().HasKey(@"RecId");
        }

        partial void CustomizeStationTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region StatusInfo Mapping

        private void StatusInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StatusInfo>().ToTable(@"StatusInfo", @"dbo");
            modelBuilder.Entity<StatusInfo>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<StatusInfo>().Property(x => x.TotalDiskSpace).HasColumnName(@"TotalDiskSpace").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<StatusInfo>().Property(x => x.FreeDiskSpace).HasColumnName(@"FreeDiskSpace").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<StatusInfo>().Property(x => x.UsedPercent).HasColumnName(@"UsedPercent").HasColumnType(@"decimal(6,2)").ValueGeneratedNever();
            modelBuilder.Entity<StatusInfo>().Property(x => x.SystemSettingsRecId).HasColumnName(@"SystemSettingsRecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StatusInfo>().HasKey(@"RecId");
        }

        partial void CustomizeStatusInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region SystemSetting Mapping

        private void SystemSettingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SystemSetting>().ToTable(@"SystemSettings", @"dbo");
            modelBuilder.Entity<SystemSetting>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<SystemSetting>().Property(x => x.MachineName).HasColumnName(@"MachineName").HasColumnType(@"nvarchar(15)").IsRequired().ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"''");
            modelBuilder.Entity<SystemSetting>().Property(x => x.ChannelListType).HasColumnName(@"ChannelListType").HasColumnType(@"smallint").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.FavouritesOnly).HasColumnName(@"FavouritesOnly").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.SaveBufferToFile).HasColumnName(@"SaveBufferToFile").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.EnableLogging).HasColumnName(@"EnableLogging").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.LastUpdateChannels).HasColumnName(@"LastUpdateChannels").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.LastUpdateEPG).HasColumnName(@"LastUpdateEPG").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.LastUpdateTimers).HasColumnName(@"LastUpdateTimers").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.LastUpdateRecordings).HasColumnName(@"LastUpdateRecordings").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().Property(x => x.LastUpdateStatus).HasColumnName(@"LastUpdateStatus").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<SystemSetting>().HasKey(@"RecId");
        }

        partial void CustomizeSystemSettingMapping(ModelBuilder modelBuilder);

        #endregion

        #region Timer Mapping

        private void TimerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Timer>().ToTable(@"Timers", @"dbo");
            modelBuilder.Entity<Timer>().Property(x => x.RecId).HasColumnName(@"RecId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Timer>().Property(x => x.Modtime).HasColumnName(@"Modtime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.Number).HasColumnName(@"Number").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.Active).HasColumnName(@"Active").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.ChannelRecId).HasColumnName(@"ChannelRecId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.Duration).HasColumnName(@"Duration").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Timer>().Property(x => x.Title).HasColumnName(@"Title").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Timer>().HasKey(@"RecId");
        }

        partial void CustomizeTimerMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Channel>().HasMany(x => x.EPGs).WithOne(op => op.Channel).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"ChannelRecId");
            modelBuilder.Entity<Channel>().HasMany(x => x.Timers).WithOne(op => op.Channel).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"ChannelRecId");

            modelBuilder.Entity<EPG>().HasOne(x => x.Channel).WithMany(op => op.EPGs).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"ChannelRecId");

            modelBuilder.Entity<Station>().HasOne(x => x.StationType1).WithMany(op => op.Stations).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"StationType");

            modelBuilder.Entity<StationType>().HasMany(x => x.Stations).WithOne(op => op.StationType1).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"StationType");

            modelBuilder.Entity<StatusInfo>().HasOne(x => x.SystemSetting).WithMany(op => op.StatusInfos).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"SystemSettingsRecId");

            modelBuilder.Entity<SystemSetting>().HasMany(x => x.StatusInfos).WithOne(op => op.SystemSetting).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"SystemSettingsRecId");

            modelBuilder.Entity<Timer>().HasOne(x => x.Channel).WithMany(op => op.Timers).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"ChannelRecId");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
